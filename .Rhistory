training["classe"]
training[-"classe"]
training[-c("classe")]
training[, -c("classe")]
training[, !c("classe")]
training[, -c(classe)]
training[, -classe]
training[-classe]
training[, -classe]
training[, -c("classe")]
training[, c("classe")]
training[, not(c("classe"))]
training[, c("classe")]
select(training, -classes)
select(training, -classe)
fitRF <- rfcv(select(training, classe),
training$classe,
data = training,
cv.fold = 5)
fitRF <- rfcv(training,
classe,
data = training,
cv.fold = 5)
training
fitRF <- rfcv(training,
training$classe,
data = training,
cv.fold = 5)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(gbm)
library(randomForest)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
building <- building[,-c(1:5)]
building$classe <- as.factor(building$classe)
validation <- validation[,-c(1:5)]
building <- building[, colMeans(is.na(building)) < 0.6]
dim(building)
nzv <- nearZeroVar(building)
building <- building[, -nzv]
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
fitRF <- rfcv(training,
training$classe,
data = training,
cv.fold = 3)
fitRF <- rfcv(training,
training$classe,
cv.fold = 3)
predRF <- predict(fitRF, testing)
fitRF <- train(classe ~ ., data = training, method = "rf",
trControl = control, tuneLength = 5, preProcess = "pca")
install.packages("ranger")
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5, preProcess = "pca")
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5)
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
building <- building %>%
select(-c(1:5)) %>%
mutate(classe = as.factor(classe))
validation <- validation %>%
select(-c(1:5))
nzv
nzv <- nearZeroVar(building)
nzv
building <- building %>%
select(-nzv) %>%
mutate(classe = as.factor(classe))
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building[, colMeans(is.na(building)) < 0.6]
nzv <- nearZeroVar(building)
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
validation <- validation %>%
select(-all_of(nzv))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
predict(fitRF, validation)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rpart.plot)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building[, colMeans(is.na(building)) < 0.6]
nzv <- nearZeroVar(building)
?fancyRpartPlot
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building[, colMeans(is.na(building)) < 0.6]
nzv <- nearZeroVar(building)
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5)
fitRF$finalModel
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
fitTree <- train(classe ~ ., data = training, method = "rpart",
trControl = control, tuneLength = 5)
fancyRpartPlot(fitTree$finalModel)
predTree <- predict(fitTree, testing)
cfTree <- confusionMatrix(predTree, testing$classe)
cfTree
cfRF$overall["Accuracy"]
cfTree$overall["Accuracy"]
predict(fitRF, validation)
predict(fitTree, validation)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building[, colMeans(is.na(building)) < 0.9]
nzv <- nearZeroVar(building)
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5)
fitRF$finalModel
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
fitTree <- train(classe ~ ., data = training, method = "rpart",
trControl = control, tuneLength = 5)
fancyRpartPlot(fitTree$finalModel)
predTree <- predict(fitTree, testing)
cfTree <- confusionMatrix(predTree, testing$classe)
cfTree
cfRF$overall["Accuracy"]
cfTree$overall["Accuracy"]
predict(fitTree, validation)
View(building)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building[, colMeans(is.na(building)) < 0.9]
building[, -c(1:6)]
nzv <- nearZeroVar(building)
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5)
fitRF$finalModel
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
fitTree <- train(classe ~ ., data = training, method = "rpart",
trControl = control, tuneLength = 5)
fancyRpartPlot(fitTree$finalModel)
predTree <- predict(fitTree, testing)
cfTree <- confusionMatrix(predTree, testing$classe)
cfTree
cfRF$overall["Accuracy"]
cfTree$overall["Accuracy"]
predict(fitTree, validation)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building %>%
filter(across(everything(), mean) < 0.9) %>%
select(-c(1:7))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building %>%
filter(across(everything(), function(x) mean(is.na(x))) < 0.9) %>%
select(-c(1:7))
#building <- building[, colMeans(is.na(building)) < 0.9]
#building <- building[, -c(1:7)]
nzv <- nearZeroVar(building)
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
building <- building[, colMeans(is.na(building)) < 0.9]
building <- building[, -c(1:7)]
nzv <- nearZeroVar(building)
building <- building %>%
select(-all_of(nzv)) %>%
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5)
fitRF$finalModel
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
fitTree <- train(classe ~ ., data = training, method = "rpart",
trControl = control, tuneLength = 5)
fancyRpartPlot(fitTree$finalModel)
predTree <- predict(fitTree, testing)
cfTree <- confusionMatrix(predTree, testing$classe)
cfTree
cfRF$overall["Accuracy"]
cfTree$overall["Accuracy"]
predict(fitTree, validation)
predict(fitRF, validation)
building <- read_csv(building.file, col_types = -`...1`)
building <- read_csv(building.file)
building
building[, 1:7]
building <- building[, colMeans(is.na(building)) < 0.9]
building
building %>%
filter(colMeans(is.na(everything())) < 0.9)
building %>%
filter(across(everything(), function(x) mean(is.na(x))) < 0.9)
building %>%
filter(across(everything(), function(x) mean(is.na(x))) < 0.9) %>%
dim()
dim(building)
?select
building %>%
select(across(everything(), function(x) mean(is.na(x))) < 0.9) %>%
dim()
building %>%
select(where(function(x) mean(is.na(x)) < 0.9)) %>%
dim()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
building %>%
select(where(function(x) mean(is.na(x)) < 0.9)) %>%
dim()
building %>%
select(where(function(x) mean(is.na(x)) < 0.9), -c(1:7)) %>%
dim()
nzv <- nearZeroVar(building)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(caret)
library(rpart)
library(ranger)
library(rattle)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
nzv <- nearZeroVar(building)
building <- building %>%
# Selecting vars where proportion of NAs is less than 90%
select(where(function(x) mean(is.na(x)) < 0.9),
-c(1:7), # Removing metadata
-all_of(nzv)) %>% # Removing vars with near zero variance
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
?trainControl
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(ranger)
library(rattle)
library(caret)
library(rpart)
library(gbm)
set.seed(2491)
building.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
validation.url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
building.file <- "./1_data/pml-training.csv"
validation.file <- "./1_data/pml-validation.csv"
if(!file.exists(building.file)) download.file(building.url, building.file)
if(!file.exists(validation.file)) download.file(validation.url, validation.file)
building <- read_csv(building.file)
validation <- read_csv(validation.file)
dim(building)
dim(validation)
nzv <- nearZeroVar(building)
building <- building %>%
# Selecting vars where proportion of NAs is less than 90%
select(where(function(x) mean(is.na(x)) <= 0.9),
-c(1:7), # Removing metadata
-all_of(nzv)) %>% # Removing vars with near zero variance
mutate(classe = as.factor(classe))
inTrain <- createDataPartition(building$classe, p = 0.7, list = FALSE)
training <- building[inTrain, ]
testing <- building[-inTrain, ]
control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
fitTree <- train(classe ~ ., data = training, method = "rpart",
trControl = control, tuneLength = 5)
fancyRpartPlot(fitTree$finalModel)
predTree <- predict(fitTree, testing)
cfTree <- confusionMatrix(predTree, testing$classe)
cfTree
fitRF <- train(classe ~ ., data = training, method = "ranger",
trControl = control, tuneLength = 5)
fitRF$finalModel
predRF <- predict(fitRF, testing)
cfRF <- confusionMatrix(predRF, testing$classe)
cfRF
fitGBM <- train(classe ~ ., data = training, method = "gbm",
trControl = control, tuneLength = 5)
fitGBM$finalModel
predGBM <- predict(fitGBM, testing)
cfGBM <- confusionMatrix(predGBM, testing$classe)
cfGBM
cat(paste0("Decision trees accuracy: ", cfTree$overall["Accuracy"],
"\nRandom forest accuracy: ", cfRF$overall["Accuracy"],
"\nGradient boosting accuracy: ", cfGBM$overall["Accuracy"]))
predict(fitTree, validation)
predict(fitRF, validation)
predict(fitTree, validation)
predict(fitRF, validation)
predict(fitGBM, validation)
cat(paste0("Decision trees accuracy: ", round(cfTree$overall["Accuracy"] * 100, 2),
"\nRandom forest accuracy: ", round(cfRF$overall["Accuracy"] * 100, 2),
"\nGradient boosting accuracy: ", round(cfGBM$overall["Accuracy"] * 100, 2)))
predGBM$overall
cfGBM$overall
cat(paste0("out-of-sample error for each model",
"Decision trees: ", round((1 - cfTree$overall["Accuracy"]) * 100, 2),
"\nRandom forest accuracy: ", round((1 - cfRF$overall["Accuracy"]) * 100, 2),
"\nGradient boosting accuracy: ", round((1 - cfGBM$overall["Accuracy"]) * 100, 2)))
library(parallel)
library(doParallel)
install.packages("doParallel")
library(doParallel)
rm(list = ls())
?train
